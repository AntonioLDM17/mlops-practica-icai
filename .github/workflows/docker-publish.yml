name: Docker MLOps

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  train-and-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: DVC and Python setup
        uses: iterative/setup-dvc@v1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure Git
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name  "${{ secrets.GIT_USER_NAME }}"

      - name: Restore DVC Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/dvc
          key: dvc-cache-${{ hashFiles('dvc.yaml', 'dvc.lock') }}
          restore-keys: |
            dvc-cache-

      # === PULL usando el mismo patrón que tu cml.yml (funciona) ===
      - name: DVC Pull
        env:
          DAGSHUB_API_KEY: ${{ secrets.DAGSHUB_API_KEY }}
        run: |
          dvc remote modify origin --local access_key_id $DAGSHUB_API_KEY
          dvc remote modify origin --local secret_access_key $DAGSHUB_API_KEY
          # Si falla el pull (p.ej., permisos), no rompas el job: el train generará model.pkl
          dvc pull -r origin || echo "WARN: dvc pull falló; se generará model.pkl en el paso de training"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install "mlflow<3"
          pip install pyyaml
          pip install -r requirements.txt

      - name: Setup of CML
        uses: iterative/setup-cml@v1

      - name: Run training script
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_API_KEY }}
          MLFLOW_TRACKING_URI:      ${{ secrets.MLFLOW_TRACKING_URI }}
        run: |
          # Entrena y registra; si no había model.pkl del pull, lo crea ahora
          python3 train.py
          # Reproduce pipeline si procede (no fallar el job si no hay cambios)
          dvc repro || true
          dvc status || true
          ls -lh model.pkl || (echo "ERROR: model.pkl no existe tras entrenamiento" && exit 1)

      # === Publicación de imágenes en Docker Hub ===
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push WEB image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mlops-web:latest -f Dockerfile.web .
          docker push     ${{ secrets.DOCKERHUB_USERNAME }}/mlops-web:latest

      - name: Build & Push API image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/mlops-api:latest .
          docker push     ${{ secrets.DOCKERHUB_USERNAME }}/mlops-api:latest
